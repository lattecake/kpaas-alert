// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/transport/grpc"
	"github.com/go-kit/kit/transport/http"
	"github.com/lattecake/kpaas-alert/pkg/endpoint"
	http1 "github.com/lattecake/kpaas-alert/pkg/http"
	"github.com/lattecake/kpaas-alert/pkg/service"
	"github.com/oklog/oklog/pkg/group"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initGRPCHandler(endpoints, g)
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"Alert":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore()},
		"GetAlert": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore()},
	}
	return options
}
func defaultGRPCOptions(logger log.Logger) map[string][]grpc.ServerOption {
	options := map[string][]grpc.ServerOption{
		"Alert":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore()},
		"GetAlert": {grpc.ServerErrorLogger(logger), grpc.ServerBefore()},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, mw map[string][]endpoint1.Middleware) {
	mw["Alert"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Alert"))}
	mw["GetAlert"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetAlert"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Alert", "GetAlert"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
